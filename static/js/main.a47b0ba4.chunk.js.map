{"version":3,"sources":["components/Navbar/navbar.js","components/Header/header.js","components/main/main.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","message","score","topScore","Header","CharacterCard","onClick","handleClick","id","alt","name","src","image","Wrapper","children","App","state","guessClick","handleCorrectGuess","newData","newScore","newTopScore","Math","max","setState","handleIncorrectGuess","clickcard","find","item","push","console","log","this","Characters","sort","random","map","character","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6iCAceA,G,MAZA,SAAAC,GACb,OACE,yBAAKC,UAAU,yCACb,0CACA,0BAAMA,UAAU,WACd,4BAAMD,EAAME,UAHhB,cAKcF,EAAMG,MALpB,cAKsCH,EAAMI,YCOjCC,G,MAdA,SAAAL,GACb,OACE,6BACE,4BAAQC,UAAU,UAChB,4CACA,4GCgBOK,G,MApBO,SAAAN,GACpB,OACE,yBAAKC,UAAU,QACb,yBACEM,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMS,KACvCR,UAAU,iBAEV,yBAAKS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,SAEnC,yBAAKZ,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAMW,W,aCR3BG,MAJf,SAAiBd,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMe,WCiF1BC,E,2MA5EbC,MAAQ,CACNd,MAAO,EACPC,SAAU,EACVc,WAAY,GACZhB,QAAS,kB,EAGXiB,mBAAqB,SAAAC,GAAW,MAEF,EAAKH,MAAzBb,EAFsB,EAEtBA,SAEFiB,EAJwB,EAEZlB,MAEO,EAEnBmB,EAAcC,KAAKC,IAAIH,EAAUjB,GACvC,EAAKqB,SAAS,CACZtB,MAAOkB,EACPjB,SAAUkB,K,EAIdI,qBAAuB,SAAAN,GACrB,EAAKK,SAAS,CACZtB,MAAO,EACPe,WAAY,GACZhB,QAAS,wB,EAIbyB,UAAY,SAAAlB,GAEV,IAAIS,EAAa,EAAKD,MAAMC,WAEdA,EAAWU,MAAK,SAAAC,GAC5B,OAAOA,IAASpB,KAGhB,EAAKiB,wBAELR,EAAWY,KAAKrB,GAEhB,EAAKgB,SAAS,CACZP,WAAYA,EACZhB,QAAS,eAEX,EAAKiB,sBAGPY,QAAQC,IAAI,EAAKf,Q,wEAGT,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEd,MAAO8B,KAAKhB,MAAMd,MAClBC,SAAU6B,KAAKhB,MAAMb,SACrBF,QAAS+B,KAAKhB,MAAMf,UAEtB,kBAAC,EAAD,MAEA,kBAAC,EAAD,KACGgC,EAAWC,MAAK,iBAAM,GAAMZ,KAAKa,YAAUC,KAAI,SAAAC,GAAS,OACvD,kBAAC,EAAD,CACE7B,GAAI6B,EAAU7B,GACd8B,IAAKD,EAAU7B,GACfE,KAAM2B,EAAU3B,KAChBE,MAAOyB,EAAUzB,MACjBL,YAAa,EAAKmB,qB,GArEda,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a47b0ba4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./navbar.css\";\r\nconst Navbar = props => {\r\n  return (\r\n    <div className=\"navbar navbar-dark bg-dark box-shadow\">\r\n      <h1>click game</h1>\r\n      <span className=\"message\">\r\n        <h2 >{props.message}</h2>\r\n      </span>\r\n      Your Score:{props.score}|Top Score:{props.topScore}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\nconst Header = props => {\r\n  return (\r\n    <div>\r\n      <header className=\"header\">\r\n        <h1>Clicky Game!</h1>\r\n        <h2>\r\n          Click on an image to earn points, but don't click on any more than\r\n          once!\r\n        </h2>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./main.css\";\r\n\r\nconst CharacterCard = props => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div\r\n        onClick={() => props.handleClick(props.id)}\r\n        className=\"img-container\"\r\n      >\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {props.name}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\nimport Navbar from \"./components/Navbar/navbar\";\nimport Header from \"./components/Header/header\";\nimport Main from \"./components/main/main\";\nimport Characters from \"./characters.json\";\nimport Wrapper from \"./components/Wrapper\";\nclass App extends React.Component {\n  //Set the state  of state,topscore,guess clicked id,message\n  state = {\n    score: 0,\n    topScore: 0,\n    guessClick: [],\n    message: \"Click to start\"\n  };\n  //Handle a correct guess on click\n  handleCorrectGuess = newData => {\n    //Capture the state  for score and top score\n    const { topScore, score } = this.state;\n    //Increase the score\n    const newScore = score + 1;\n    //check if the score is greater than top score ans set the state\n    const newTopScore = Math.max(newScore, topScore);\n    this.setState({\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n  // Handle incorrect guess.These are id that have been previously clicked and exist in the array\n  handleIncorrectGuess = newData => {\n    this.setState({\n      score: 0,\n      guessClick: [],\n      message: \"You lost,Try Again\"\n    });\n  };\n  //On click fuction\n  clickcard = id => {\n    //capture the current state of array of all images that havebeen clicked\n    let guessClick = this.state.guessClick;\n    //use the find method to find if the clicked image id exists in the array\n    let guessed = guessClick.find(item => {\n      return item === id;\n    });\n    if (guessed) {\n      this.handleIncorrectGuess();\n    } else {\n      guessClick.push(id);\n\n      this.setState({\n        guessClick: guessClick,\n        message: \"Good Guess\"\n      });\n      this.handleCorrectGuess();\n    }\n\n    console.log(this.state);\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        <Header />\n\n        <Wrapper>\n          {Characters.sort(() => 0.5 - Math.random()).map(character => (\n            <Main\n              id={character.id}\n              key={character.id}\n              name={character.name}\n              image={character.image}\n              handleClick={this.clickcard}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}